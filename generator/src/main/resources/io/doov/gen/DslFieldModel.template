package ${package.name};

import static io.doov.core.dsl.DOOV.fieldInPosition;
import static ${process.field.info.class}.*;

import javax.annotation.Generated;

import java.util.stream.Stream;

${imports}

@Generated(value = "${source.generator.name}", comments = "generated from ${process.class}")
public final class ${target.class.name} {

${fields}

${methods}

    public static ${model.class.name}StepWhen when(StepCondition condition) {
        return new ${model.class.name}StepWhen(condition);
    }

    public static class ${model.class.name}StepWhen extends DefaultStepWhen {
        public ${model.class.name}StepWhen(StepCondition stepCondition) {
            super(stepCondition);
        }
        
        @Override
        public ${model.class.name}Rule validate() {
            return new ${model.class.name}Rule(this, true);
        }
    }

    public static class ${model.class.name}Rule extends DefaultValidationRule {
        public ${model.class.name}Rule(StepWhen stepWhen, boolean shortCircuit) {
            super(stepWhen, shortCircuit);
        }
        
        public Result executeOn(${model.class.name} model) {
            return executeOn(new ${model.class.name}Wrapper(model));
        }

        @Override
        public ${model.class.name}Rule withShortCircuit(boolean shortCircuit) {
            return new ${model.class.name}Rule(getStepWhen(), shortCircuit);
        }

        @Override
        public ${model.class.name}Rule registerOn(RuleRegistry registry) {
            return (${model.class.name}Rule) super.registerOn(registry);
        }
    }
}