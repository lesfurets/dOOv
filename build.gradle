import com.lesfurets.gradle.versions.*
import com.lesfurets.gradle.git.*

apply from: 'dependencyVersions.gradle'

allprojects {
    group = 'io.doov'
    version = "1.0-SNAPSHOT"
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }
}

apply plugin: VersionsPlugin
apply plugin: "io.codearte.nexus-staging"

defaultTasks 'verify'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

def userName = project.hasProperty('ossrhUsername') ? project.ossrhUsername : 'userName'
def password = project.hasProperty('ossrhPassword') ? project.ossrhPassword : 'password'

def repo = project.hasProperty('repository') ? project.repository : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def snapRepo = project.hasProperty('snapshotRepository') ? project.snapshotRepository : "https://oss.sonatype.org/content/repositories/snapshots/"

ext.isSonaTypeRepository = isReleaseVersion ? repo.startsWith('https://oss.sonatype.org') : snapRepo.startsWith('https://oss.sonatype.org')

subprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'signing'

    dependencies {
        constraints {
            compile group: 'org.assertj', name: 'assertj-core', version: assertjVersion
            compile group: 'org.apache.commons', name: 'commons-text', version: commonsTextVersion
            compile group: 'com.google.guava', name: 'guava', version: guavaVersion
            compile group: 'cglib', name: 'cglib', version: '3.2.5'
            compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
            compile group: 'org.apache.maven', name: 'maven-plugin-api', version: mavenPluginApiVersion
            compile group: 'org.apache.maven', name: 'maven-core', version: mavenPluginApiVersion

            compileOnly group: 'org.apache.maven.plugin-tools', name: 'maven-plugin-annotations', version: mavenPluginAnnotationsVersion

            testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
            testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
            testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion
        }
    }


    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    javadoc {
        source = sourceSets.main.allJava
        classpath += configurations.compile
        classpath += configurations.compileOnly
    }

    test {
        useJUnitPlatform()
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    def pomProject = {
        description = 'dOOv, a fluent API for type-safe domain model validation'
        url = 'https://www.dOOv.io'
        scm {
            url 'https://github.com/lesfurets/dOOv'
            connection 'scm:git:git://github.com/lesfurets/dOOv.git'
            developerConnection 'scm:git:git@github.com/lesfurets/dOOv.git'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                name 'Alexandre Dubreuil'
                email 'alexandre.dubreuil@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
            developer {
                name 'Gilles DiGuglielmo'
                email 'gilles.diguglielmo@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
            developer {
                name 'Yohann Fouquer'
                email 'yohann.fouquer@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
            developer {
                name 'Ozan Gunalp'
                email 'ozan.gunalp@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
        }
    }

    install {
        repositories {
            mavenInstaller {
                pom.project pomProject
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: repo) {
                    authentication(userName: userName, password: password)
                }

                snapshotRepository(url: snapRepo) {
                    authentication(userName: userName, password: password)
                }
                pom.project pomProject
            }
        }
    }

    nexusStaging {
        delayBetweenRetriesInMillis = 5000
    }

    // Deploy tasks
    closeAndReleaseRepository.mustRunAfter(uploadArchives)
    closeRepository.enabled = isReleaseVersion && isSonaTypeRepository
    releaseRepository.enabled = isReleaseVersion && isSonaTypeRepository

    task verify(dependsOn: build)
    task deploy(dependsOn: [build, uploadArchives, closeAndReleaseRepository])

}

wrapper {
    gradleVersion = '4.7'
    distributionType = Wrapper.DistributionType.ALL
}

// Release commits and tag
task commitRelease(type: GitCommitTask, dependsOn: writeVersion)
commitRelease.mustRunAfter(subprojects.deploy)
task tagVersion(type: GitTagTask, dependsOn: commitRelease)
subprojects.javadoc.mustRunAfter(tagVersion.action)
task writeDevVersion(type: SetVersionTask, dependsOn: [tagVersion, subprojects.deploy]) {
    newVersion = "1.0-SNAPSHOT"
}
task commitDevVersion(type: GitCommitTask, dependsOn: writeDevVersion) {
    message = "[release] Revert versions to SNAPSHOT"
}
task pushRelease(type: GitPushTask, dependsOn: commitDevVersion)

task release(dependsOn: pushRelease)