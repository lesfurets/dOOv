import com.lesfurets.gradle.versions.*
import com.lesfurets.gradle.git.*

apply from: 'dependencyVersions.gradle'

allprojects {
    group = 'io.doov'
    version = "1.0-SNAPSHOT"
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }
}

apply plugin: VersionsPlugin
apply plugin: "io.codearte.nexus-staging"

defaultTasks 'verify'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

def userName = project.hasProperty('ossrhUsername') ? project.ossrhUsername : 'userName'
def password = project.hasProperty('ossrhPassword') ? project.ossrhPassword : 'password'

def repo = project.hasProperty('repository') ? project.repository : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def snapRepo = project.hasProperty('snapshotRepository') ? project.snapshotRepository : "https://oss.sonatype.org/content/repositories/snapshots/"

ext.isSonaTypeRepository = isReleaseVersion ? repo.startsWith('https://oss.sonatype.org') : snapRepo.startsWith('https://oss.sonatype.org')

subprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'signing'

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    javadoc {
        source = sourceSets.main.allJava
        classpath += configurations.compile
        classpath += configurations.compileOnly
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-proc:none'
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    def pomProject = {
        description = 'dOOv, a fluent API for type-safe domain model validation'
        url = 'https://www.dOOv.io'
        scm {
            url 'https://github.com/lesfurets/dOOv'
            connection 'scm:git:git://github.com/lesfurets/dOOv.git'
            developerConnection 'scm:git:git@github.com/lesfurets/dOOv.git'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                name 'Alexandre Dubreuil'
                email 'alexandre.dubreuil@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
            developer {
                name 'Gilles DiGuglielmo'
                email 'gilles.diguglielmo@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
            developer {
                name 'Yohann Fouquer'
                email 'yohann.fouquer@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
            developer {
                name 'Ozan Gunalp'
                email 'ozan.gunalp@lesfurets.com'
                organization 'LesFurets.com'
                organizationUrl 'https://www.lesfurets.com'
            }
        }
    }

    install {
        repositories {
            mavenInstaller {
                pom.project pomProject
                pom.whenConfigured { pom ->
                    pom.project {
                        name = pomProjectName
                    }
                }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: repo) {
                    authentication(userName: userName, password: password)
                }

                snapshotRepository(url: snapRepo) {
                    authentication(userName: userName, password: password)
                }
                pom.project pomProject
                pom.whenConfigured { pom ->
                    pom.project {
                        name = pomProjectName
                    }
                }
            }
        }
    }

    task verify(dependsOn: build)
    task deploy(dependsOn: [build, uploadArchives, project.rootProject.closeAndReleaseRepository])
    project.rootProject.closeRepository.dependsOn(uploadArchives)
    project.rootProject.releaseRepository.dependsOn(uploadArchives)

}

wrapper {
    gradleVersion = '4.7'
    distributionType = Wrapper.DistributionType.ALL
}

nexusStaging {
    delayBetweenRetriesInMillis = 5000
}

// Deploy tasks
closeRepository.enabled = isReleaseVersion && isSonaTypeRepository
releaseRepository.enabled = isReleaseVersion && isSonaTypeRepository

// Release commits and tag
task commitRelease(type: GitCommitTask, dependsOn: writeVersion)
commitRelease.mustRunAfter(subprojects.deploy)
task tagVersion(type: GitTagTask, dependsOn: commitRelease)
task writeDevVersion(type: SetVersionTask, dependsOn: [tagVersion, subprojects.deploy]) {
    newVersion = "1.0-SNAPSHOT"
}
task commitDevVersion(type: GitCommitTask, dependsOn: writeDevVersion) {
    message = "[release] Revert versions to SNAPSHOT"
}
task pushRelease(type: GitPushTask, dependsOn: commitDevVersion)

task release(dependsOn: pushRelease)